{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","cardComponent","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onRequestRobots","console","log","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.982a5f39.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// const Card=(props)=> {\r\n//     const {name, email, id}=props; //or like this\r\nconst Card=({name, email, id})=> {\r\n    return (\r\n        //<h1>Robofriends</h1>\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img src={`https://robohash.org/${id}?200x200`} alt='robots'></img>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList=({robots})=>{\r\n    const cardComponent=robots.map((user, i) => {\r\n        return (<Card \r\n        key={i}\r\n        id={robots[i].id}\r\n        name={robots[i].name}\r\n        email={robots[i].email}\r\n        />);\r\n    });\r\n    return (\r\n        <div>\r\n            {cardComponent}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n        <input \r\n        className='pa3 ba b--green bg-lightest-blue' \r\n        type='search' \r\n        placeholder='search robots' \r\n        onChange={searchChange}\r\n        />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll=(props)=>{\r\n    return (\r\n        <div style={{overflowY:'scroll', border:'5px solid black', height:'800px'}}>\r\n            {props.children}\r\n        </div>\r\n        );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render() {\r\n        if(this.state.hasError){\r\n            return <h1>OOOps. That is not good</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n//import logo from './logo.svg';\nimport './App.css';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\n//import {robots} from './robots'; // to load from robots.js\n\nimport {setSearchField, requestRobots} from '../actions';\n\nconst mapStateToProps=state=>{\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps=(dispatch)=>{\n  return {\n    onSearchChange: (event)=>dispatch(setSearchField(event.target.value)),\n    onRequestRobots: ()=> dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n /*  constructor() {\n    super()\n    this.state={\n      robots: [],\n      //searchfield: ''\n    }\n    console.log('constructor');\n  } */\n\n  componentDidMount(){\n    //console.log(this.props.store.getState());\n    this.props.onRequestRobots();\n    /* fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=>{\n      return response.json();\n    })\n    .then(users=>{\n      this.setState({robots: users});\n    })\n    */\n    console.log('componentDidMount');\n  } \n\n// onSearchChange=(event)=>{\n//   this.setState({searchfield: event.target.value});\n//   //console.log(filteredRobots);\n// }\n\n  render()\n  {\n    //const {robots}=this.state;\n    const { searchField, onSearchChange, robots, isPending }=this.props;\n    const filteredRobots=robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    console.log('render');\n    //if (this.state.robots.length===0){\n    if (isPending){\n      return <h1>Loading...</h1>\n    } else {\n    return (\n    <div className='tc'>\n    <h1 className='f2'>Robofriends</h1>\n    <SearchBox searchChange={onSearchChange}/>\n      <Scroll>\n        <ErrorBoundry>\n          <CardList robots={filteredRobots}/>\n        </ErrorBoundry>\n      </Scroll>\n    </div>\n  );\n  }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED} from './constants';\r\n\r\nexport const setSearchField=(text)=>({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots=()=>(dispatch)=>{\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response=>response.json())\r\n    .then(data=>dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n    .catch(error=>dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","export const CHANGE_SEARCH_FIELD='CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING='REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS='REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED='REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED} from './constants';\r\nimport { returnStatement } from '@babel/types';\r\n\r\nconst initialStateSearch={\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots=(state=initialStateSearch, action={})=>{\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n        default:\r\n            return state; \r\n    }\r\n}\r\n\r\nconst initialStateRobots={\r\n    isPending: false,\r\n    robots:[],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots=(state=initialStateRobots, action={})=>{\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, {isPending: true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {robots: action.payload, isPending:false})\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {error: action.payload, isPending: false})\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider, connect } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\n//import Hello from './Hello';\n\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger=createLogger();\nconst rootReducer=combineReducers({searchRobots, requestRobots});\nconst store=createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\n//ReactDOM.render(<Hello greeting={'Hello '+ 'React Ninja'}/>, document.getElementById('root'));\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}